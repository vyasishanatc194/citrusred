<?php/*** A Forward_to_friend class** This class is for forward campaign mails** @version 1.0* @author Pravin <pravinjha@gmail.com>* @project Redcappi*/class Forward_to_friend extends CI_Controller{   	function __construct(){        parent::__construct();			# Load emailreport model class which handles database interaction			$this->load->helper('phpmailer');		$this->load->model('UserModel');		$this->load->model('newsletter/Campaign_Model');		$this->load->model('newsletter/Subscriber_Model');			$this->load->model('newsletter/Emailreport_Model');		$this->load->model('newsletter/Campaign_Autoresponder_Model');				$this->load->model('newsletter/Autoresponder_Model');				$this->load->model('ConfigurationModel');			force_ssl();			}	/**		Function index to forward campign mail		@param int id contain camping id		@param int subsriber_id contain subscriber id who is forwarding email		@param int forward_friend_id contain forward mail friend id	*/	function index($id=0,$subscriber_id=0,$forward_friend_id=0){		if($subscriber_id !=''){			$arrSubscriber = $this->is_authorized->decodeSubscriber($subscriber_id);			list($subscriber_id,$subscriber_email) = $arrSubscriber;			$subscriber_email = $this->is_authorized->webCompatibleString($subscriber_email);		}		#check campign id should be numeric		$campaign_id = (is_numeric($id))? $id: 0;		#check subscriber id should be numeric		$subscriber_id = (is_numeric($subscriber_id))? $subscriber_id: 0;						// Subscriber's IP		$subscriberIP = $this->is_authorized->getRealIpAddr(); 		# GET TOTAL FORWARDED COUNT		$totalForwardedYet = $this->Emailreport_Model->get_friends_count($campaign_id);		$total_forwarded_yet = $totalForwardedYet->totForwarded;		$forward_limit = $this->ConfigurationModel->get_site_configuration_data_as_array();										#################################################################		# Mark mail read by one in email track table for subscriber id	#		#################################################################		# Get Total number of read mail 		$email_report=$this->Emailreport_Model->get_emailreport_data(array('campaign_id'=>$campaign_id,	'subscriber_id'=>$subscriber_id, 'email_sent'=>1));				if($email_report[0]['email_track_read']<=0){						#update in databse for subscriber			$this->Emailreport_Model->update_emailreport( array('email_track_read'=>1,'email_track_read_date'=>date('Y-m-d H:i:s',now())),															array('campaign_id'=>$campaign_id,'subscriber_id'=>$subscriber_id)														);				$this->db->query("update red_email_subscribers set `read` = `read`+1, `last_read_date`=current_timestamp() where subscriber_id='$subscriber_id'");			# Update read counter of campaign 			$this->db->query("update `red_email_campaigns_scheduled` set `email_track_read` = `email_track_read`+1 where campaign_id='$campaign_id'");					// Increment OPENED global_ipr_daily for major webmails			$arrEml = @explode('@',$subscriber_email);			$emlDomain = $arrEml[1];			if(in_array($emlDomain, config_item('major_domains'))){								$rsCampaign = $this->db->query("select DATE_FORMAT(email_send_date, '%Y-%m-%d')email_send_date, pipeline,campaign_created_by user_id from red_email_campaigns where campaign_id='$campaign_id'" );				$vmta = $rsCampaign->row()->pipeline;				$email_send_date = $rsCampaign->row()->email_send_date;				$user_id = $rsCampaign->row()->user_id;				$rsCampaign->free_result();								$this->db->query("insert into red_global_ipr_daily set `mail_domain` = '$emlDomain' ,  `log_date`='$email_send_date' ,  `pipeline`='$vmta', `user_id`='$user_id', total_opened=(total_opened + 1) ON DUPLICATE  KEY UPDATE  total_opened=(total_opened + 1) ");						}			}				$user_id=$email_report[0]['user_id'];		$user=$this->UserModel->get_user_data(array('member_id'=>$user_id));		$rc_logo=$user[0]['rc_logo'];		# Recieve any messages to be shown, when friend is added		$messages=$this->messages->get();		#Loads Forward To Friend view.		$this->load->view('newsletter/forward_to_friend',array('title'=>'Forward To Friend','messages'=>$messages,'campaign_id'=>$campaign_id,'subscriber_id'=>$subscriber_id,'forward_friend_id'=>$forward_friend_id,'is_autoresponder'=>0,'rc_logo'=>$rc_logo));	}	function forwardnow($id=0,$subscriber_id=0,$forward_friend_id=0){		 		$campaign_id = (is_numeric($id))? $id: 0;		 		$subscriber_id = (is_numeric($subscriber_id))? $subscriber_id: 0;						// Subscriber's IP		$subscriberIP = $this->is_authorized->getRealIpAddr(); 		# GET TOTAL FORWARDED COUNT		$totalForwardedYet = $this->Emailreport_Model->get_friends_count($campaign_id);		$total_forwarded_yet = $totalForwardedYet->totForwarded;		$forward_limit = $this->ConfigurationModel->get_site_configuration_data_as_array();							 		 		if($this->input->post('submit')=='Submit'){				$this->form_validation->set_rules('to[]', 'Email Address', 'required|valid_emails');			if($this->form_validation->run()==true){								$campaigns=$this->Campaign_Model->get_campaign_data(array('campaign_id'=>$campaign_id));								$subject=$campaigns[0]['email_subject'];				$sender=$campaigns[0]['sender_email'];				$sender_name=$campaigns[0]['sender_name'];								$user_id=$campaigns[0]['campaign_created_by'];	 				/**				* Folowing section commented by @pravinjha on 28-June 2016, as suggested by Jignesh & Sumit				* Now Sender will be same as Campaign's sender				// Check forward_friend_id:													// If forward_friend_id>0 then campaign is forwarded by friend				    // else subscriber is forwarding the campaign								if($forward_friend_id>0){										$forward_friend_info=$this->Emailreport_Model->get_forward_friend(array('id'=>$forward_friend_id));										$sender=$forward_friend_info[0]['forward_friend'];					$sender_name=$forward_friend_info[0]['forward_friend'];				}else{					$email_report_info=$this->Emailreport_Model->get_emailreport_data(array('campaign_id'=>$campaign_id,'subscriber_id'=>$subscriber_id,'subscriber_email_address'=>$subscriber_email,'email_sent'=>1));											$sender=$email_report_info[0]['subscriber_email_address'];					$sender_name=$email_report_info[0]['subscriber_first_name'];				}								// check sender should not be empty									// If sender is empty then set user info in sender 					if($sender==""){					$user=$this->UserModel->get_user_data(array('member_id'=>$user_id));					$sender_name= (!is_null($user[0]['first_name']))?$user[0]['first_name'] : $user[0]['email_address'];					$sender=$user[0]['email_address'];				}							*/								# Attach campign links				//$page_html=$this->attach_campaign_link($campaigns[0],$subscriber_id,$user[0]['rc_logo'],$user[0]['language']);				$page_html=$this->Campaign_Autoresponder_Model->attach_campaign_link($campaigns[0],$user);												$campaign_footer_text_only = $this->Campaign_Autoresponder_Model->campaign_footer_text_only($user, $campaigns[0]['campaign_id'], false, true);											# Forward campign mail to friends				foreach($this->input->post('to') as $to){					if(!$this->isDuplicate($campaign_id, $subscriberIP, $to)){					if($total_forwarded_yet < $forward_limit['campaign_forward_limit']){					$total_forwarded_yet++;																									$input_array=array('campaign_id'=>$campaign_id,	'subscriber_id'=>$subscriber_id,'forward_friend'=>$to,'date_forward'=>date('Y-m-d H:i:s',now()),'ip_address'=>$subscriberIP);					$insert_id=$this->Emailreport_Model->insert_forwardfriend($input_array);					#collect forward friend id and email address string in an search array					$search_arr=array('[inserted_forward_id]','[CONTACT_EMAIL_ID]');					$replace_arr=array($insert_id,$to);					#Replace forward friend id and email address in campign content					$message=str_replace($search_arr,$replace_arr,$page_html);					$text_message=$campaigns[0]['campaign_text_content'].$campaign_footer_text_only;					$text_message=str_replace($search_arr,$replace_arr,$text_message);					$email_personalization = true;					$vmta = 'rcmailer8';					// Email Personalize campaign 									//$email_subscriber=$this->Emailreport_Model->get_subscriber_emailreport_data(array('subscriber_id'=>$subscriber_id,'user_id'=>$user_id), false, 1,0, false);					$email_subscriber=$this->Emailreport_Model->get_subscriber_emailreport_data(array('campaign_id'=>$campaign_id,'subscriber_id'=>$subscriber_id), false, 1,0, false);					$subscriber_info=$email_subscriber[0];					$this->Campaign_Autoresponder_Model->getPersonalization($message,$text_message,$subject,$subscriber_info,false,$campaign_id,$vmta, $email_personalization);					forward_friend_send_email($to, $sender,$sender_name,$subject,$message,$text_message,$bouncemailreply,$campaign_id);					}					}// Duplicate Record to avoid spam				}								# Update forwarded count in red_email_track table for each subscriber									$this->db->query("update red_email_track set `email_track_forward` = `email_track_forward` + ".count($this->input->post('to')).", `date_forward`=current_timestamp() where `campaign_id` = '$campaign_id' and `subscriber_id`='$subscriber_id'");								$this->db->query("update red_email_campaigns_scheduled set `email_track_forward` = `email_track_forward` + ".count($this->input->post('to'))."  where `campaign_id` = '$campaign_id'");										$this->db->query("update red_email_subscribers set `forwarded` = `forwarded`+ ".count($this->input->post('to')).", `last_forwarded_date`=current_timestamp() where subscriber_id='$subscriber_id'");				# Display forward message after forwarding email				redirect('newsletter/forward_to_friend/thanks_msg/'.$user[0]['rc_logo']);							}		}		$user_id=$email_report[0]['user_id'];		$user=$this->UserModel->get_user_data(array('member_id'=>$user_id));		$rc_logo=$user[0]['rc_logo'];		# Recieve any messages to be shown, when friend is added		$messages=$this->messages->get();		#Loads Forward To Friend view.		$this->load->view('newsletter/forward_to_friend',array('title'=>'Forward To Friend','messages'=>$messages,'campaign_id'=>$campaign_id,'subscriber_id'=>$subscriber_id,'forward_friend_id'=>$forward_friend_id,'is_autoresponder'=>0,'rc_logo'=>$rc_logo));	}	/**		Function autoresponder to forward autoresponder mail		@param int id contain autoresponder id		@param int scheduled_id contain autoresponder scheduled id		@param int subscriber_id contain subscriber id who is forwarding email		@param int forward_friend_id contain forward mail friend id	*/	function autoresponder($id=0,$scheduled_id=0,$subscriber_id=0,$forward_friend_id=0){		if($subscriber_id !=''){			$arrSubscriber = $this->is_authorized->decodeSubscriber($subscriber_id);			list($subscriber_id,$subscriber_email) = $arrSubscriber;			$subscriber_email = $this->is_authorized->webCompatibleString($subscriber_email);		}		$campaign_id = (is_numeric($id))?$id:0;		$scheduled_id = (is_numeric($scheduled_id))?$scheduled_id:0;	 	# GET TOTAL FORWARDED COUNT		$totalForwardedYet = $this->Emailreport_Model->get_friends_count($id);		$total_forwarded_yet = $totalForwardedYet->totForwarded;				$forward_limit = $this->ConfigurationModel->get_site_configuration_data_as_array();						$subscriberIP = $this->is_authorized->getRealIpAddr();		# Mark email has been read by subscriber		$email_report=$this->Emailreport_Model->update_autoresponder_emailreport(				array('email_track_read'=>1,'email_delivered'=>1),				array('autoresponder_scheduled_id'=>$scheduled_id,	'email_track_subscriber_id '=>$subscriber_id)		);		 		# Fetches campaign data from database		$campaign_array=$this->Autoresponder_Model->get_autoresponder_data(array(	'campaign_id'=>$id	));				$user_id=$campaign_array[0]['campaign_created_by'];		$user=$this->UserModel->get_user_data(array('member_id'=>$user_id));		$rc_logo=$user[0]['rc_logo'];		# Recieve any messages to be shown, when friend is added		$messages=$this->messages->get();		#Loads Forward To Friend view.		$this->load->view('newsletter/forward_to_friend',array('title'=>'Forward To Friend','messages'=>$messages,'campaign_id'=>$campaign_id,'scheduled_id'=>$scheduled_id,'subscriber_id'=>$subscriber_id,'forward_friend_id'=>$forward_friend_id,'is_autoresponder'=>1,'rc_logo'=>$rc_logo));	}	function autoforwardnow($id=0,$scheduled_id=0,$subscriber_id=0,$forward_friend_id=0){				$campaign_id = (is_numeric($id))?$id:0;		$scheduled_id = (is_numeric($scheduled_id))?$scheduled_id:0;	 	# GET TOTAL FORWARDED COUNT		$totalForwardedYet = $this->Emailreport_Model->get_friends_count($id);		$total_forwarded_yet = $totalForwardedYet->totForwarded;				$forward_limit = $this->ConfigurationModel->get_site_configuration_data_as_array();						$subscriberIP = $this->is_authorized->getRealIpAddr();		if($this->input->post('submit')=='Submit'){						$this->form_validation->set_rules('to[]', 'Email Address', 'required|valid_emails');						if($this->form_validation->run()==true)	{							$campaigns=$this->Autoresponder_Model->get_autoresponder_data(array('campaign_id'=>$campaign_id));				$user_id=$campaigns[0]['campaign_created_by'];	#set user id				#############################################################				# Check forward_friend_id:									#				# If forward_friend_id>0 then campaign is forward by friend	#				# else subscriber is forward the campign					#				#############################################################				if($forward_friend_id>0){					$forward_friend_info=$this->Emailreport_Model->get_forward_friend(array('id'=>$forward_friend_id));					$sender=$forward_friend_info[0]['forward_friend'];					$sender_name=$forward_friend_info[0]['forward_friend'];				}else{					$email_report_info=$this->Emailreport_Model->get_autoresponder_emailreport_subscriber(array(	'autoresponder_scheduled_id'=>$scheduled_id,'email_track_subscriber_id '=>$subscriber_id));					$sender=$email_report_info[0]['subscriber_email'];					$sender_name=(!is_null($email_report_info[0]['subscriber_first_name']))?$email_report_info[0]['subscriber_first_name']: $email_report_info[0]['subscriber_email'];				}				// check sender should not be empty									// If sender is empty then set user info in sender 	#				$user=$this->UserModel->get_user_data(array('member_id'=>$user_id));								if($sender==""){					$sender= $user[0]['email_address'];					$sender_name=(!is_null($user[0]['first_name']))?$user[0]['first_name']:$user[0]['email_address'];				}				$subject=$campaigns[0]['campaign_title'];				#Encrypt campign id				$encode_camapign_id=$this->is_authorized->base64UrlSafeEncode($campaigns[0]['campaign_id']);				#############################				#Email Personalize campaign #				#############################				$subscriber_info=$this->Subscriber_Model->get_subscriber_info_view(array('subscriber_id'=>$subscriber_id,'subscriber_created_by'=>$user_id));				$subscriber_arr=array();				if(count($subscriber_info)>0){					foreach($subscriber_info[0] as $key=>$val){						$subscriber_arr[$key]=$val;					}					$subscriber_arr = array_filter($subscriber_arr);								}				$email_personalize_arr=array();				$search_email_personalize=$this->get_email_personalize_data($email_personalize_arr);								$arrPersonalizeReplace=$this->get_fallback_value($campaigns[0]['campaign_content'],$campaigns[0]['campaign_text_content'],$subject,$email_personalize_arr);								$replace_email_personalize = array_merge( $arrPersonalizeReplace,$subscriber_arr);				###########################################################				#Replace Email Personalize value in campaign message 	  #				###########################################################				$campaigns[0]['campaign_content']=str_replace($search_email_personalize, $replace_email_personalize, $campaigns[0]['campaign_content']);				###########################################################				#Replace Email Personalize value in campaign text 	 	  #				###########################################################				$campaigns[0]['campaign_text_content']=str_replace($search_email_personalize, $replace_email_personalize, $campaigns[0]['campaign_text_content']);				$page_html=$campaigns[0]['campaign_content'];				#attach camping links				$page_html=$this->attach_campaign_link($campaigns[0],$subscriber_id,$user[0]['rc_logo'],$user[0]['language'],true);				$campaign_footer_text_only = $this->Campaign_Autoresponder_Model->campaign_footer_text_only($user, $campaigns[0]['campaign_id'], true, true);				#Forward email to friend list				foreach($this->input->post('to') as $to){ 					if(!$this->isDuplicate($campaign_id, $subscriberIP, $to)){						if($total_forwarded_yet < $forward_limit['campaign_forward_limit']){						$total_forwarded_yet++;												$input_array=array('campaign_id'=>$campaign_id,	'subscriber_id'=>$subscriber_id, 'forward_friend'=>$to,	'is_autoresponder'=>1,'date_forward'=>date('Y-m-d H:i:s',now()),	'ip_address'=>$subscriberIP	);						$insert_id=$this->Emailreport_Model->insert_forwardfriend($input_array);						$search_arr=array('[inserted_forward_id]','[CONTACT_EMAIL_ID]','[scheduled_id]');						$replace_arr=array($insert_id,$to,$scheduled_id);						$message=str_replace($search_arr,$replace_arr,$page_html);						$text_message=$campaigns[0]['campaign_text_content'].$campaign_footer_text_only; 						$text_message=str_replace($search_arr,$replace_arr,$text_message);/* 	 echo"<br/>".$to;	 echo"<br/>".$sender;	 echo"<br/>".$sender_name;	 echo"<br/>".$subject;	 echo"<br/>".$message;	 echo"<br/>".$text_message;	 echo"<br/>".$bouncemailreply;	 echo"<br/>".$campaign_id;	 exit; */						forward_friend_send_email($to,$sender,$sender_name,$subject,$message,$text_message,$bouncemailreply,$campaign_id);						}					}//Duplicate insertion avoidance 				}				#Prepare array to fetch email report info from databse				$fetch_condiotions_array=array(	'autoresponder_scheduled_id'=>$scheduled_id, 'email_track_subscriber_id '=>$subscriber_id);				$email_report=$this->Emailreport_Model->get_autoresponder_emailreport_subscriber($fetch_condiotions_array);				#Increase counter of forwared mail				$totForwarded = count($this->input->post('to'));				$email_track_forward	= $email_report[0]['email_track_forward'] + $totForwarded;						$input_array=array('email_track_forward'=>$email_track_forward,'email_track_read'=>1);				$this->Emailreport_Model->update_autoresponder_emailreport($input_array,array('autoresponder_scheduled_id'=>$scheduled_id,'email_track_subscriber_id '=>$subscriber_id));				$this->db->query("update red_email_subscribers set `forwarded` = `forwarded`+ $totForwarded, `last_forwarded_date`=current_timestamp() where subscriber_id='$subscriber_id'");							redirect('newsletter/forward_to_friend/thanks_msg/'.$user[0]['rc_logo']);			}		}		 	}	/**		Function thanks_msg to display thanks message	*/	function thanks_msg($rc_logo=1){		$msg= '<h3>Your email has been forwarded.</h3>';		// Load Thanks Message view		$this->load->view('newsletter/thanks_msg',array('msg'=>$msg,'rc_logo'=>$rc_logo));	}	/*	 * Function attach_campaign_linkto attach campaign links:emailtrack,mailview,footer,unsubscribe,	 * forward links 	 * @param (array) (campaign)  contains campaign detail	 */	function attach_campaign_link($campaign=array(),$subscriber_id=0,$rc_logo=0,$user_selected_language="",$autoresponder=false){		#Get shoreten url 		$shorten_url=get_shorten_url();				#fetch text according to user selected language				$language_text_arr=$this->UserModel->get_language_text(array('language'=>$user_selected_language));		foreach($language_text_arr as $language){			${$language['text_code']}=$language['text'];		}		$rtl_language_array=unserialize(RIGHT_TO_LEFT_LANGUAGE_ARRAY);		$dir="";		$align="align='right'";		$is_rtl=false;		if(in_array($user_selected_language,$rtl_language_array)){			$dir="dir='rtl'";			$align="align='left'";			$is_rtl=true;		}		$encode_camapign_id=$this->is_authorized->base64UrlSafeEncode($campaign['campaign_id']);		if($autoresponder){			$autoresponder_link = CAMPAIGN_DOMAIN.'a/'.$campaign['campaign_id'];			$mail_view_link="<table width='100%' style='xxxbackground_colorxxx'><tr><td align='center'><font size='1'>$email_not_displaying_correctly <a href='".$autoresponder_link."'>$view_in_browser</a></font></td></tr></table>"; 		}else{			if($subscriber_id>0){				$campaign_link= CAMPAIGN_DOMAIN.'c/'.$encode_camapign_id."/$subscriber_id";				#create a link for Viewing the mail in browser				$mail_view_link="<table width='100%' style='xxxbackground_colorxxx'><tr><td align='center'><font size='1'>$email_not_displaying_correctly <a href='".  $campaign_link."'>$view_in_browser</a></font></td></tr></table>";			}else{				$campaign_link = CAMPAIGN_DOMAIN.'c/'.$campaign['campaign_id'];				#creat a link for Viewing the mail in browser				$mail_view_link="<table width='100%' style='xxxbackground_colorxxx'><tr><td align='center'><font size='1'>$email_not_displaying_correctly <a href='".  $campaign_link."'>$view_in_browser</a></font></td></tr></table>";			}		}				#create a link for unscubscribe the mail		if($autoresponder){			$unsubscribe_link="<tr><td style=\"font-family:arial, Helvetica, sans-serif;font-size:11px;font-weight:normal;text-align:justify;color:#5b5c5c;margin:6px 0px 0px 0px;line-height:17px\"><a style=\"font-family:arial, Helvetica, sans-serif;font-size:11px;font-weight:normal;text-align:justify;color:#5b5c5c;margin:6px 0px 0px 0px;line-height:17px\" href='".site_url('newsletter/unsubscribe_mail/unsubscribe/'.$campaign['campaign_id'].'/[scheduled_id]'.'/'.$subscriber_id)."'>$unsubscribe</a>";		}else{			$unsubscribe_link="<tr><td style=\"font-family:arial, Helvetica, sans-serif;font-size:11px;font-weight:normal;text-align:justify;color:#5b5c5c;margin:6px 0px 0px 0px;line-height:17px\"><a style=\"font-family:arial, Helvetica, sans-serif;font-size:11px;font-weight:normal;text-align:justify;color:#5b5c5c;margin:6px 0px 0px 0px;line-height:17px\" href='".site_url('newsletter/unsubscribe_mail/unsubscribe/'.$campaign['campaign_id'])."'>$unsubscribe</a>";		}		#create a link for forward the mail		if($autoresponder){			$forward_link="<a style=\"font-family:arial, Helvetica, sans-serif;font-size:11px;font-weight:normal;text-align:justify;color:#5b5c5c;margin:6px 0px 0px 0px;line-height:17px\" href='".site_url('newsletter/forward_to_friend/autoresponder/'.$campaign['campaign_id'].'/[scheduled_id]'.'/'.$subscriber_id.'/[inserted_forward_id]')."'>$forward_to_friend</a></td></tr></table></td></tr></table>";		}else{			$forward_link="<a style=\"font-family:arial, Helvetica, sans-serif;font-size:11px;font-weight:normal;text-align:justify;color:#5b5c5c;margin:6px 0px 0px 0px;line-height:17px\" href='".site_url('newsletter/forward_to_friend/index/'.$campaign['campaign_id'].'/'.$subscriber_id.'/[inserted_forward_id]')."'>$forward_to_friend</a></td></tr></table></td></tr></table>";		}				if($rc_logo==1){			$logo="<a href='http://www.".SYSTEM_DOMAIN_NAME."'><img border='0' src='".base_url()."webappassets/images-front/thanks-logo.png' /></a>";		}else{			$logo="";		}		if($user_selected_language!="en"){			$to_ensure_delivery=$to_ensure_delivery.",";		}		#create a link to attach footer of email		if($autoresponder){			$footer_link="<table width='100%' align='center'  style='background-color:#fff' $dir><tr><td><table width='595' align='center' style='background-color:#ffffff;'><tr><td colspan='2'><hr/></td></tr><tr><td style=\"font-family:arial, Helvetica, sans-serif;font-size:11px;font-weight:normal;text-align:justify;color:#5b5c5c;margin:6px 0px 0px 0px;line-height:17px\">$this_email_was_sent_to [CONTACT_EMAIL_ID] </td><td rowspan=\"3\" $align>$logo</td></tr><tr><td style=\"font-family:arial, Helvetica, sans-serif;font-size:11px;font-weight:normal;text-align:justify;color:#5b5c5c;margin:6px 0px 0px 0px;line-height:17px\">$to_ensure_delivery $add_us_to_your_address_book.</td></tr>";		}else{			$footer_link="<table width='100%' align='center'  style='background-color:#ffffff;' $dir><tr><td><table width='595' align='center'  style='background-color:#ffffff;' ><tr><td colspan='2'><hr/></td></tr><tr><td style=\"font-family:arial, Helvetica, sans-serif;font-size:11px;font-weight:normal;text-align:justify;color:#5b5c5c;margin:6px 0px 0px 0px;line-height:17px\" >$this_email_was_sent_to [CONTACT_EMAIL_ID] </td><td  rowspan=\"3\" $align>$logo</td></tr><tr><td style=\"font-family:arial, Helvetica, sans-serif;font-size:11px;font-weight:normal;text-align:justify;color:#5b5c5c;margin:6px 0px 0px 0px;line-height:17px\">		$to_ensure_delivery $add_us_to_your_address_book.</td></tr>";		}		#create a link to attach footer html of email		$footer_html='</body></html>';		if(($campaign['campaign_template_option']!=3)&&($campaign['campaign_template_option']!=5)){			$campaign['campaign_content']=html_entity_decode($campaign['campaign_content'], ENT_QUOTES, "utf-8" );		}		//$campaign['campaign_content']=$campaign['campaign_after_encode_url'];		if($campaign['campaign_template_option']==5){			$message=$emailtrack_img.nl2br($campaign['campaign_content']).$footer_link.$unsubscribe_link." | ".$forward_link;		}else if($campaign['campaign_template_option']==3){			$campaign['campaign_content']="<table width='100%' style='background-color:".$campaign['campaign_outer_bg'].";'><tr><td>".$campaign['campaign_content']."</td></tr></table>";			$message=$emailtrack_img.$mail_view_link.$campaign['campaign_content'].$footer_link.$unsubscribe_link." | ".$forward_link.$footer_html;		}else{			$message=$emailtrack_img.$mail_view_link.$campaign['campaign_content'].$footer_link.$unsubscribe_link." | ".$forward_link;		}				$message = str_replace("xxxbackground_colorxxx", "background-color:".$campaign['campaign_outer_bg'].";", $message);				return $message;	}		function get_email_personalize_data(&$email_personalize_arr=array()){		$sql            = 'SELECT name,value,default_value FROM `red_email_personalization`';		$query          = $this->db->query($sql);		$email_personalize=array();		if ($query->num_rows() >0)		{			$result_array=$query->result_array();	#Fetch resut			foreach($result_array as $row){				$email_personalize[]        = $row['value'];				$email_personalize_arr[$row['name']]        = $row['default_value'];			}		}		return $email_personalize;	}	function get_fallback_value(&$campaign_content="",&$text_message="",&$subject="",$arrPersonalizeReplace=array()){		$string		=		$campaign_content;				$pattren="/\{([a-zA-Z0-9_-])*,([^\/])*\}/";		preg_match_all($pattren,$string,$regs);		foreach($regs[0] as $value){			$fallback_value=$value;			$value=trim($value,'}');			$expl_value=explode(",",$value,2);			$sql            = 'SELECT name,value FROM `red_email_personalization` where value like \'%'.$expl_value[0].'%\'';			$query          = $this->db->query($sql);							if ($query->num_rows() >0){				$result_array=$query->result_array();	#Fetch resut				foreach($result_array as $row){					#Create an array of the required personalisation token and default value from CAMPAIGN					$arrPersonalizeReplace[$row['name']] = $expl_value[1];					$fallback_search_arr[]=$fallback_value;					$fallback_replace_arr[]=$row['value'];				}			}		}				$campaign_content=str_replace($fallback_search_arr, $fallback_replace_arr, $string); 		$text_message=str_replace($fallback_search_arr, $fallback_replace_arr, $text_message);		$subject=str_replace($fallback_search_arr, $fallback_replace_arr, $subject);		return $arrPersonalizeReplace;	}		function isDuplicate($cid, $thisIp, $toEmailId){	 		$sqlIsDuplicate = $this->db->query("SELECT * FROM `red_forward_friend` where campaign_id='$cid' and `ip_address`='$thisIp' and date_format(date_forward,'%Y-%m-%d')=CURDATE() and replace(`forward_friend`, '.', '') = replace('$toEmailId', '.','')");		if ($sqlIsDuplicate->num_rows())		return true;		else		return false;		}	}?>